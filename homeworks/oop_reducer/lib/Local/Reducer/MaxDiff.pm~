package Local::Reducer::MaxDiff;
use parent "Local::Reducer";

use Scalar::Util "looks_like_number";
use strict;
use warnings;

=encoding utf8
=head1 NAME
Local::Reducer::Sum
=head1 VERSION
Version 1.00
=cut
=head1 SYNOPSIS
 `Local::Reducer::MaxDiff` — выясняет максимальную разницу между полями, указанными в параметрах `top` и `bottom` конструктора, среди всех строк лога. В случае, если соответствующие поля не содержат числовые значения, строка игнорируется.
my $reducer = Local::Reducer::MaxDiff->new(
    top => 'received',
    bottom => 'sended',
    source => Local::Source::Text->new(text =>"sended:1024,received:2048\nsended:2048,received:10240"),
    row_class => 'Local::Row::Simple',
    initial_value => 0,
);
=cut
sub new {
	my ($self, %args) = @_;
	 unless (exists $args{'top'}) {
		die "top field doesn't exist";
	}
	if (ref $args{top}) {
		die 'top is not scalar';
	}

	unless (exists $args{'bottom'}) {
		die "bottom field doesn't exist";
	}

	if (ref $args{bottom}) {
		die "bottom field doesn't exist";
	}
	$self = $self->SUPER::new(%args);
	$self->{top} = $args{top};
	$self->{bottom} = $args{bottom};
	return $self;
}
sub reduce {
	my $self = shift;
	my $row = $self->{source}->next; 
	if ($row) {
		$row = $self->{row_class}->new(str => $row);
		if ( looks_like_number( $row->get($self->{bottom}) ) and
			looks_like_number( $row->get($self->{top}) ) ) {
			my $diff = $row->get($self->{top}) - $row->get($self->{bottom});
			$self->{reduced} = $diff if $diff > $self->reduced;
		}
	}
	else { return undef }
}
1;
